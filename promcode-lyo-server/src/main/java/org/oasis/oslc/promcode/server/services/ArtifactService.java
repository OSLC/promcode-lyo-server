// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.oasis.oslc.promcode.server.services;

// spotless:off
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import jakarta.inject.Inject;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.FormParam;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.HeaderParam;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.MultivaluedMap;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.Status;
import jakarta.ws.rs.core.UriInfo;
import jakarta.ws.rs.core.UriBuilder;

import org.apache.wink.json4j.JSONException;
import org.apache.wink.json4j.JSONObject;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import org.oasis.oslc.promcode.server.RestDelegate;
import org.oasis.oslc.promcode.server.ServerConstants;
import org.eclipse.lyo.oslc.domains.promcode.Oslc_promcodeDomainConstants;
import org.oasis.oslc.promcode.server.servlet.ServiceProviderCatalogSingleton;
import org.eclipse.lyo.oslc.domains.promcode.Artifact;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

import org.eclipse.lyo.server.ui.model.PreviewFactory;
// Start of user code imports
// End of user code
// spotless:on

// Start of user code pre_class_code
// End of user code
@Path("artifact")
public class ArtifactService
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;
    @Inject  private RestDelegate delegate;

    private static final Logger log = LoggerFactory.getLogger(ArtifactService.class);

    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public ArtifactService()
    {
        super();
    }

    @GET
    @Path("{id}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Operation(
        summary = "GET for resources of type {'" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "'}",
        description = "GET for resources of type {'" + "<a href=\"" + Oslc_promcodeDomainConstants.ARTIFACT_TYPE + "\">" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "</a>" + "'}" +
            ", with respective resource shapes {'" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_promcodeDomainConstants.ARTIFACT_PATH + "\">" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "</a>" + "'}",
        responses = {@ApiResponse(description = "default response",
            content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(
                mediaType = OslcMediaType.APPLICATION_XML), @Content(
                mediaType = OslcMediaType.APPLICATION_JSON), @Content(
                mediaType = OslcMediaType.TEXT_TURTLE), @Content(
                mediaType = MediaType.TEXT_HTML), @Content(
                mediaType = OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML)})
        }
    )
    public Artifact getArtifact(
                @PathParam("id") final String id
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final Artifact aArtifact = delegate.getArtifact(httpServletRequest, id);

        if (aArtifact != null) {
            // Start of user code getArtifact
            // End of user code
            httpServletResponse.setHeader("ETag", delegate.getETagFromArtifact(aArtifact));
            httpServletResponse.addHeader(ServerConstants.HDR_OSLC_VERSION, ServerConstants.OSLC_VERSION_V2);
            return aArtifact;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{id}")
    @Produces({ MediaType.TEXT_HTML })
    @Operation(
        summary = "GET for resources of type {'" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "'}",
        description = "GET for resources of type {'" + "<a href=\"" + Oslc_promcodeDomainConstants.ARTIFACT_TYPE + "\">" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "</a>" + "'}" +
            ", with respective resource shapes {'" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_promcodeDomainConstants.ARTIFACT_PATH + "\">" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "</a>" + "'}",
        responses = {@ApiResponse(description = "default response",
            content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(
                mediaType = OslcMediaType.APPLICATION_XML), @Content(
                mediaType = OslcMediaType.APPLICATION_JSON), @Content(
                mediaType = OslcMediaType.TEXT_TURTLE), @Content(
                mediaType = MediaType.TEXT_HTML), @Content(
                mediaType = OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML)})
        }
    )
    public void getArtifactAsHtml(
        @PathParam("id") final String id
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getArtifactAsHtml_init
        // End of user code

        final Artifact aArtifact = delegate.getArtifact(httpServletRequest, id);

        if (aArtifact != null) {
            httpServletRequest.setAttribute("aArtifact", aArtifact);
            // Start of user code getArtifactAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("aResource", aArtifact);
            httpServletRequest.setAttribute("resourceTypeName", Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME);
            httpServletRequest.setAttribute("shapeUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(OslcConstants.PATH_RESOURCE_SHAPES).path(Oslc_promcodeDomainConstants.ARTIFACT_PATH).build());
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/org/oasis/oslc/promcode/server/viewresource.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{id}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    @Operation(
        summary = "GET for resources of type {'" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "'}",
        description = "GET for resources of type {'" + "<a href=\"" + Oslc_promcodeDomainConstants.ARTIFACT_TYPE + "\">" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "</a>" + "'}" +
            ", with respective resource shapes {'" + "<a href=\"" + "../services/" + OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_promcodeDomainConstants.ARTIFACT_PATH + "\">" + Oslc_promcodeDomainConstants.ARTIFACT_LOCALNAME + "</a>" + "'}",
        responses = {@ApiResponse(description = "default response",
            content = {@Content(mediaType = OslcMediaType.APPLICATION_RDF_XML), @Content(
                mediaType = OslcMediaType.APPLICATION_XML), @Content(
                mediaType = OslcMediaType.APPLICATION_JSON), @Content(
                mediaType = OslcMediaType.TEXT_TURTLE), @Content(
                mediaType = MediaType.TEXT_HTML), @Content(
                mediaType = OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML)})
        }
    )
    public Compact getArtifactCompact(
        @PathParam("id") final String id
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "200px";
        String smallPreviewHintWidth = "300px";
        String largePreviewHintHeight = "400px";
        String largePreviewHintWidth = "600px";

        // Start of user code getArtifactCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final Artifact aArtifact = delegate.getArtifact(httpServletRequest, id);

        if (aArtifact != null) {
            final Compact compact = new Compact();

            compact.setAbout(aArtifact.getAbout());
            compact.setTitle(aArtifact.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aArtifact.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aArtifact.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(ServerConstants.HDR_OSLC_VERSION, ServerConstants.OSLC_VERSION_V2);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{id}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getArtifactAsHtmlSmallPreview(
        @PathParam("id") final String id
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getArtifactAsHtmlSmallPreview_init
        // End of user code

        final Artifact aArtifact = delegate.getArtifact(httpServletRequest, id);

        if (aArtifact != null) {
            httpServletRequest.setAttribute("aArtifact", aArtifact);
            // Start of user code getArtifactAsHtmlSmallPreview_setAttributes
            // End of user code

            try {
                httpServletRequest.setAttribute("resourceTitle", aArtifact.toString());
                ArrayList<String> getterMethodNames = new ArrayList<String>(Arrays.asList("getIsPartOf", "getProducedFor", "getTargets", "getDescription", "getIdentifier", "getSource", "getTitle", "getSequenceNumber"));
                // Start of user code getArtifactAsHtmlSmallPreview_setResourceGetterMethods
                //TODO: modify the set of attributes to show in the preview
                // End of user code
                String oslcPreviewDataSetAsString = PreviewFactory.getPreviewAsJsonString(aArtifact, getterMethodNames, false);
                httpServletRequest.setAttribute("resourcePreviewDataSet", oslcPreviewDataSetAsString);
            } catch (Exception e) {
                log.error("Could not handle smallPreview", e);
                throw new WebApplicationException("Could not handle smallPreview", e);
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/org/oasis/oslc/promcode/server/uipreview.jsp");
            httpServletResponse.addHeader(ServerConstants.HDR_OSLC_VERSION, ServerConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("{id}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getArtifactAsHtmlLargePreview(
        @PathParam("id") final String id
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getArtifactAsHtmlLargePreview_init
        // End of user code

        final Artifact aArtifact = delegate.getArtifact(httpServletRequest, id);

        if (aArtifact != null) {
            httpServletRequest.setAttribute("aArtifact", aArtifact);
            // Start of user code getArtifactAsHtmlLargePreview_setAttributes
            // End of user code

            try {
                httpServletRequest.setAttribute("resourceTitle", aArtifact.toString());
                ArrayList<String> getterMethodNames = new ArrayList<String>(Arrays.asList("getIsPartOf", "getProducedFor", "getTargets", "getDescription", "getIdentifier", "getSource", "getTitle", "getSequenceNumber"));
                // Start of user code getArtifactAsHtmlLargePreview_setResourceGetterMethods
                //TODO: modify the set of attributes to show in the preview
                // End of user code
                String oslcPreviewDataSetAsString = PreviewFactory.getPreviewAsJsonString(aArtifact, getterMethodNames, true);
                httpServletRequest.setAttribute("resourcePreviewDataSet", oslcPreviewDataSetAsString);
            } catch (Exception e) {
                log.error("Could not handle largePreview", e);
                throw new WebApplicationException("Could not handle largePreview", e);
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/org/oasis/oslc/promcode/server/uipreview.jsp");
            httpServletResponse.addHeader(ServerConstants.HDR_OSLC_VERSION, ServerConstants.OSLC_VERSION_V2);
            rd.forward(httpServletRequest, httpServletResponse);
            return;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
}
